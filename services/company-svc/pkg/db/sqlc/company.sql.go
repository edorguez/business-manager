// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: company.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const createCompany = `-- name: CreateCompany :one
INSERT INTO 
  company.company (
    name,
    name_format_url,
    image_url,
    is_free_trial,
    plan_id,
    last_payment_date
  ) 
VALUES (
  $1, $2, $3, $4, $5, $6
) 
RETURNING id, name, name_format_url, image_url, is_free_trial, plan_id, last_payment_date, created_at, modified_at
`

type CreateCompanyParams struct {
	Name            string         `json:"name"`
	NameFormatUrl   string         `json:"name_format_url"`
	ImageUrl        sql.NullString `json:"image_url"`
	IsFreeTrial     interface{}    `json:"is_free_trial"`
	PlanID          int64          `json:"plan_id"`
	LastPaymentDate time.Time      `json:"last_payment_date"`
}

func (q *Queries) CreateCompany(ctx context.Context, arg CreateCompanyParams) (CompanyCompany, error) {
	row := q.db.QueryRowContext(ctx, createCompany,
		arg.Name,
		arg.NameFormatUrl,
		arg.ImageUrl,
		arg.IsFreeTrial,
		arg.PlanID,
		arg.LastPaymentDate,
	)
	var i CompanyCompany
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.NameFormatUrl,
		&i.ImageUrl,
		&i.IsFreeTrial,
		&i.PlanID,
		&i.LastPaymentDate,
		&i.CreatedAt,
		&i.ModifiedAt,
	)
	return i, err
}

const deleteCompany = `-- name: DeleteCompany :exec
DELETE FROM 
  company.company
WHERE 
  id = $1
`

func (q *Queries) DeleteCompany(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteCompany, id)
	return err
}

const getCompanies = `-- name: GetCompanies :many
SELECT 
  id,
  name,
  name_format_url,
  image_url,
  plan_id,
  last_payment_date,
  created_at,
  modified_at
FROM 
  company.company
ORDER BY 
  id
LIMIT 
  $1
OFFSET 
  $2
`

type GetCompaniesParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

type GetCompaniesRow struct {
	ID              int64          `json:"id"`
	Name            string         `json:"name"`
	NameFormatUrl   string         `json:"name_format_url"`
	ImageUrl        sql.NullString `json:"image_url"`
	PlanID          int64          `json:"plan_id"`
	LastPaymentDate time.Time      `json:"last_payment_date"`
	CreatedAt       time.Time      `json:"created_at"`
	ModifiedAt      time.Time      `json:"modified_at"`
}

func (q *Queries) GetCompanies(ctx context.Context, arg GetCompaniesParams) ([]GetCompaniesRow, error) {
	rows, err := q.db.QueryContext(ctx, getCompanies, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetCompaniesRow{}
	for rows.Next() {
		var i GetCompaniesRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.NameFormatUrl,
			&i.ImageUrl,
			&i.PlanID,
			&i.LastPaymentDate,
			&i.CreatedAt,
			&i.ModifiedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCompany = `-- name: GetCompany :one
SELECT 
  id,
  name,
  name_format_url,
  image_url,
  plan_id,
  last_payment_date,
  created_at,
  modified_at
FROM 
  company.company
WHERE 
  id = $1 
LIMIT 1
`

type GetCompanyRow struct {
	ID              int64          `json:"id"`
	Name            string         `json:"name"`
	NameFormatUrl   string         `json:"name_format_url"`
	ImageUrl        sql.NullString `json:"image_url"`
	PlanID          int64          `json:"plan_id"`
	LastPaymentDate time.Time      `json:"last_payment_date"`
	CreatedAt       time.Time      `json:"created_at"`
	ModifiedAt      time.Time      `json:"modified_at"`
}

func (q *Queries) GetCompany(ctx context.Context, id int64) (GetCompanyRow, error) {
	row := q.db.QueryRowContext(ctx, getCompany, id)
	var i GetCompanyRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.NameFormatUrl,
		&i.ImageUrl,
		&i.PlanID,
		&i.LastPaymentDate,
		&i.CreatedAt,
		&i.ModifiedAt,
	)
	return i, err
}

const getCompanyByName = `-- name: GetCompanyByName :one
SELECT 
  id,
  name,
  name_format_url,
  image_url,
  plan_id,
  last_payment_date,
  created_at,
  modified_at
FROM 
  company.company
WHERE 
  LOWER(name) = LOWER($1)
LIMIT 1
`

type GetCompanyByNameRow struct {
	ID              int64          `json:"id"`
	Name            string         `json:"name"`
	NameFormatUrl   string         `json:"name_format_url"`
	ImageUrl        sql.NullString `json:"image_url"`
	PlanID          int64          `json:"plan_id"`
	LastPaymentDate time.Time      `json:"last_payment_date"`
	CreatedAt       time.Time      `json:"created_at"`
	ModifiedAt      time.Time      `json:"modified_at"`
}

func (q *Queries) GetCompanyByName(ctx context.Context, lower string) (GetCompanyByNameRow, error) {
	row := q.db.QueryRowContext(ctx, getCompanyByName, lower)
	var i GetCompanyByNameRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.NameFormatUrl,
		&i.ImageUrl,
		&i.PlanID,
		&i.LastPaymentDate,
		&i.CreatedAt,
		&i.ModifiedAt,
	)
	return i, err
}

const getCompanyByNameUrl = `-- name: GetCompanyByNameUrl :one
SELECT 
  id,
  name,
  name_format_url,
  image_url,
  plan_id,
  last_payment_date,
  created_at,
  modified_at
FROM 
  company.company
WHERE 
  LOWER(name_format_url) = LOWER($1)
LIMIT 1
`

type GetCompanyByNameUrlRow struct {
	ID              int64          `json:"id"`
	Name            string         `json:"name"`
	NameFormatUrl   string         `json:"name_format_url"`
	ImageUrl        sql.NullString `json:"image_url"`
	PlanID          int64          `json:"plan_id"`
	LastPaymentDate time.Time      `json:"last_payment_date"`
	CreatedAt       time.Time      `json:"created_at"`
	ModifiedAt      time.Time      `json:"modified_at"`
}

func (q *Queries) GetCompanyByNameUrl(ctx context.Context, lower string) (GetCompanyByNameUrlRow, error) {
	row := q.db.QueryRowContext(ctx, getCompanyByNameUrl, lower)
	var i GetCompanyByNameUrlRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.NameFormatUrl,
		&i.ImageUrl,
		&i.PlanID,
		&i.LastPaymentDate,
		&i.CreatedAt,
		&i.ModifiedAt,
	)
	return i, err
}

const updateCompany = `-- name: UpdateCompany :one
UPDATE 
  company.company
SET 
  name = $2,
  name_format_url = $3,
  image_url = $4,
  modified_at = NOW()
WHERE 
  id = $1
RETURNING id, name, name_format_url, image_url, is_free_trial, plan_id, last_payment_date, created_at, modified_at
`

type UpdateCompanyParams struct {
	ID            int64          `json:"id"`
	Name          string         `json:"name"`
	NameFormatUrl string         `json:"name_format_url"`
	ImageUrl      sql.NullString `json:"image_url"`
}

func (q *Queries) UpdateCompany(ctx context.Context, arg UpdateCompanyParams) (CompanyCompany, error) {
	row := q.db.QueryRowContext(ctx, updateCompany,
		arg.ID,
		arg.Name,
		arg.NameFormatUrl,
		arg.ImageUrl,
	)
	var i CompanyCompany
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.NameFormatUrl,
		&i.ImageUrl,
		&i.IsFreeTrial,
		&i.PlanID,
		&i.LastPaymentDate,
		&i.CreatedAt,
		&i.ModifiedAt,
	)
	return i, err
}
