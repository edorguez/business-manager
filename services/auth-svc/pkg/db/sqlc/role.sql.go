// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: role.sql

package db

import (
	"context"
	"database/sql"
)

const getRole = `-- name: GetRole :one
SELECT 
  id,
  name,
  description
FROM 
  auth.role
WHERE 
  id = $1 
LIMIT 1
`

type GetRoleRow struct {
	ID          int64          `json:"id"`
	Name        string         `json:"name"`
	Description sql.NullString `json:"description"`
}

func (q *Queries) GetRole(ctx context.Context, id int64) (GetRoleRow, error) {
	row := q.db.QueryRowContext(ctx, getRole, id)
	var i GetRoleRow
	err := row.Scan(&i.ID, &i.Name, &i.Description)
	return i, err
}

const getRoles = `-- name: GetRoles :many
SELECT 
  id,
  name,
  description
FROM 
  auth.role
ORDER BY 
  id
`

type GetRolesRow struct {
	ID          int64          `json:"id"`
	Name        string         `json:"name"`
	Description sql.NullString `json:"description"`
}

func (q *Queries) GetRoles(ctx context.Context) ([]GetRolesRow, error) {
	rows, err := q.db.QueryContext(ctx, getRoles)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetRolesRow{}
	for rows.Next() {
		var i GetRolesRow
		if err := rows.Scan(&i.ID, &i.Name, &i.Description); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
